plugins {
    id "groovy"
    id "checkstyle"
    id "codenarc"
    id "idea"
    id "maven-publish"
    id "java-gradle-plugin"
    id "com.jfrog.bintray" version "1.8.1"
    id "com.github.hierynomus.license" version "0.14.0"
}

repositories {
    jcenter()
}

def compileAvroVersion = "1.9.1"

dependencies {
    compile localGroovy()
    compile "org.apache.avro:avro-compiler:${compileAvroVersion}"
    testCompile "org.spockframework:spock-core:1.3-groovy-2.5"
    testCompile gradleTestKit()
}

tasks.withType(AbstractCompile) {
    options.encoding = "UTF-8"
}
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" << "-Xlint:-options" << "-Werror"
}

version = "0.17.1-SNAPSHOT"
group = "com.commercehub.gradle.plugin"

tasks.withType(AbstractArchiveTask) {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier "sources"
    extension "jar"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier "javadoc"
    extension "jar"
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/joker1007/gradle-avro-plugin")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USER")
                password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from components.java
        }
    }
}

gradlePlugin {
    plugins {
        avro {
            id = "com.commercehub.gradle.plugin.avro"
            implementationClass = "com.commercehub.gradle.plugin.avro.AvroPlugin"
        }
        avroBase {
            id = "com.commercehub.gradle.plugin.avro-base"
            implementationClass = "com.commercehub.gradle.plugin.avro.AvroBasePlugin"
        }
    }
}

idea {
    project {
        vcs = "Git"
        ipr {
            withXml { provider ->
                def node = provider.asNode()
                node.append(new XmlParser().parseText("""
                <component name="ProjectCodeStyleSettingsManager">
                    <option name="PER_PROJECT_SETTINGS">
                        <value>
                            <option name="LINE_SEPARATOR" value="&#10;"/>
                            <option name="RIGHT_MARGIN" value="140"/>
                        </value>
                    </option>
                    <option name="USE_PER_PROJECT_SETTINGS" value="true"/>
                </component>
                """.stripIndent()))
            }
        }
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

// Add the classpath file to the test runtime classpath
dependencies {
    testRuntime files(createClasspathManifest)
}

checkstyle {
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
    showViolations = true
    toolVersion = "8.23"
}
// In Gradle 4.8 the checkstyle basedir changed to no longer be the project root by default; thus we need to specify
checkstyleMain {
    configProperties = ['basedir': "$rootDir/config/checkstyle"]
}

codenarc {
    config = project.resources.text.fromFile("config/codenarc/codenarc.groovy")
    ignoreFailures = false
    maxPriority1Violations = 0
    maxPriority2Violations = 0
    maxPriority3Violations = 0
    toolVersion = "1.4"
}

tasks.create("testVersionCompatibility") {
    description = "Tests cross-compatibility of the plugin with different versions of Avro and Gradle."
    group = "Verification"
}

tasks.create("testRecentVersionCompatibility") {
    description = "Tests cross-compatibility of the plugin with recent versions of Avro and Gradle."
    group = "Verification"
}

test {
    systemProperties = [
        avroVersion: compileAvroVersion,
        gradleVersion: gradle.gradleVersion,
    ]
}

// Java 8+ is required due to requirements introduced in Avro 1.9.0
// Java 8+ is also required by Gradle 5.x
sourceCompatibility = 8

def avroVersions = ["1.9.0", "1.9.1"]
def gradleVersions = []
if (!org.gradle.api.JavaVersion.current().isJava11Compatible()) { // Gradle 4.8 appears to be the first version that supports Java 11, as per https://github.com/gradle/gradle/pull/4759 and testing
    gradleVersions.addAll("4.4", "4.4.1", "4.5", "4.5.1", "4.6", "4.7")
}
gradleVersions.addAll("4.8", "4.8.1", "4.9", "4.10", "4.10.1", "4.10.2", "4.10.3")
gradleVersions.addAll("5.0", "5.1", "5.1.1", "5.2", "5.2.1", "5.3", "5.3.1", "5.4", "5.4.1", "5.5", "5.5.1", "5.6", "5.6.1", "5.6.2")


avroVersions.each { def avroVersion ->
    gradleVersions.each { def gradleVersion ->
        def newTask = tasks.create(name: "testAvro${avroVersion}Gradle${gradleVersion}", type: Test) {
            description = "Test cross-compatibility of the plugin with Avro ${avroVersion} and Gradle ${gradleVersion}"
            systemProperties = [
                avroVersion: avroVersion,
                gradleVersion: gradleVersion,
            ]
            reports {
                html.destination = file("$buildDir/reports/tests-${avroVersion}-${gradleVersion}")
                junitXml.destination = file("$buildDir/reports/tests-${avroVersion}-${gradleVersion}")
            }
        }
        testVersionCompatibility.dependsOn newTask
        if (gradleVersions.indexOf(gradleVersion) >= gradleVersions.size() - 5) {
            testRecentVersionCompatibility.dependsOn newTask
        }
    }
}

tasks.withType(Test) {
    jvmArgs "-Xss320k"
    minHeapSize "120m"
    maxHeapSize "280m"
}

license {
    header = file("gradle/DEFAULT_LICENSE_NOTICE")
    skipExistingHeaders = true
    mapping("avdl", "JAVADOC_STYLE")
    excludes(["**/*.avsc", "**/*.avpr"]) // JSON doesn't allow comments
    exclude("**/record.vm") // Existing header in different style
    // dryRun = true
}
